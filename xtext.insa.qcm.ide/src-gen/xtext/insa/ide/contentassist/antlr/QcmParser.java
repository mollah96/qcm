/*
 * generated by Xtext 2.19.0
 */
package xtext.insa.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.insa.ide.contentassist.antlr.internal.InternalQcmParser;
import xtext.insa.services.QcmGrammarAccess;

public class QcmParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(QcmGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, QcmGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getQcmAccess().getGroup(), "rule__Qcm__Group__0");
			builder.put(grammarAccess.getQcmAccess().getGroup_2(), "rule__Qcm__Group_2__0");
			builder.put(grammarAccess.getQcmAccess().getGroup_7(), "rule__Qcm__Group_7__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_2(), "rule__Question__Group_2__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_7(), "rule__Question__Group_7__0");
			builder.put(grammarAccess.getReponseAccess().getGroup(), "rule__Reponse__Group__0");
			builder.put(grammarAccess.getReponseAccess().getGroup_2(), "rule__Reponse__Group_2__0");
			builder.put(grammarAccess.getReponseAccess().getGroup_4(), "rule__Reponse__Group_4__0");
			builder.put(grammarAccess.getQcmAccess().getDomaineAssignment_2_1(), "rule__Qcm__DomaineAssignment_2_1");
			builder.put(grammarAccess.getQcmAccess().getQuestionAssignment_6(), "rule__Qcm__QuestionAssignment_6");
			builder.put(grammarAccess.getQcmAccess().getQuestionAssignment_7_1(), "rule__Qcm__QuestionAssignment_7_1");
			builder.put(grammarAccess.getQuestionAccess().getIntituleAssignment_2_1(), "rule__Question__IntituleAssignment_2_1");
			builder.put(grammarAccess.getQuestionAccess().getReponseAssignment_6(), "rule__Question__ReponseAssignment_6");
			builder.put(grammarAccess.getQuestionAccess().getReponseAssignment_7_1(), "rule__Question__ReponseAssignment_7_1");
			builder.put(grammarAccess.getReponseAccess().getDataAssignment_2_1(), "rule__Reponse__DataAssignment_2_1");
			builder.put(grammarAccess.getReponseAccess().getValueAssignment_4_1(), "rule__Reponse__ValueAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private QcmGrammarAccess grammarAccess;

	@Override
	protected InternalQcmParser createParser() {
		InternalQcmParser result = new InternalQcmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QcmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QcmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
