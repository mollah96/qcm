/*
 * generated by Xtext 2.19.0
 */
grammar InternalQcm;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.insa.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.insa.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.insa.services.QcmGrammarAccess;

}

@parser::members {

 	private QcmGrammarAccess grammarAccess;

    public InternalQcmParser(TokenStream input, QcmGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Qcm";
   	}

   	@Override
   	protected QcmGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQcm
entryRuleQcm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQcmRule()); }
	iv_ruleQcm=ruleQcm
	{ $current=$iv_ruleQcm.current; }
	EOF;

// Rule Qcm
ruleQcm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Qcm'
		{
			newLeafNode(otherlv_0, grammarAccess.getQcmAccess().getQcmKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getQcmAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='domaine'
			{
				newLeafNode(otherlv_2, grammarAccess.getQcmAccess().getDomaineKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQcmAccess().getDomaineEStringParserRuleCall_2_1_0());
					}
					lv_domaine_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQcmRule());
						}
						set(
							$current,
							"domaine",
							lv_domaine_3_0,
							"xtext.insa.Qcm.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getQcmAccess().getCommaKeyword_3());
		}
		otherlv_5='question'
		{
			newLeafNode(otherlv_5, grammarAccess.getQcmAccess().getQuestionKeyword_4());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getQcmAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQcmAccess().getQuestionQuestionParserRuleCall_6_0());
				}
				lv_question_7_0=ruleQuestion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQcmRule());
					}
					add(
						$current,
						"question",
						lv_question_7_0,
						"xtext.insa.Qcm.Question");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getQcmAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQcmAccess().getQuestionQuestionParserRuleCall_7_1_0());
					}
					lv_question_9_0=ruleQuestion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQcmRule());
						}
						add(
							$current,
							"question",
							lv_question_9_0,
							"xtext.insa.Qcm.Question");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getQcmAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getQcmAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Question'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionAccess().getQuestionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='intitule'
			{
				newLeafNode(otherlv_2, grammarAccess.getQuestionAccess().getIntituleKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getIntituleEStringParserRuleCall_2_1_0());
					}
					lv_intitule_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						set(
							$current,
							"intitule",
							lv_intitule_3_0,
							"xtext.insa.Qcm.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getQuestionAccess().getCommaKeyword_3());
		}
		otherlv_5='reponse'
		{
			newLeafNode(otherlv_5, grammarAccess.getQuestionAccess().getReponseKeyword_4());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getReponseReponseParserRuleCall_6_0());
				}
				lv_reponse_7_0=ruleReponse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					add(
						$current,
						"reponse",
						lv_reponse_7_0,
						"xtext.insa.Qcm.Reponse");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getQuestionAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getReponseReponseParserRuleCall_7_1_0());
					}
					lv_reponse_9_0=ruleReponse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						add(
							$current,
							"reponse",
							lv_reponse_9_0,
							"xtext.insa.Qcm.Reponse");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleReponse
entryRuleReponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReponseRule()); }
	iv_ruleReponse=ruleReponse
	{ $current=$iv_ruleReponse.current; }
	EOF;

// Rule Reponse
ruleReponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Reponse'
		{
			newLeafNode(otherlv_0, grammarAccess.getReponseAccess().getReponseKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getReponseAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='data'
			{
				newLeafNode(otherlv_2, grammarAccess.getReponseAccess().getDataKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReponseAccess().getDataEStringParserRuleCall_2_1_0());
					}
					lv_data_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReponseRule());
						}
						set(
							$current,
							"data",
							lv_data_3_0,
							"xtext.insa.Qcm.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getReponseAccess().getCommaKeyword_3());
		}
		(
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getReponseAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReponseAccess().getValueEBooleanParserRuleCall_4_1_0());
					}
					lv_value_6_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReponseRule());
						}
						set(
							$current,
							"value",
							lv_value_6_0,
							"xtext.insa.Qcm.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getReponseAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
