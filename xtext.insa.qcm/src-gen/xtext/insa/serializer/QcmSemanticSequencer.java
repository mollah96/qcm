/*
 * generated by Xtext 2.19.0
 */
package xtext.insa.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import qcm.Qcm;
import qcm.QcmPackage;
import qcm.Question;
import qcm.Reponse;
import xtext.insa.services.QcmGrammarAccess;

@SuppressWarnings("all")
public class QcmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QcmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QcmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QcmPackage.QCM:
				sequence_Qcm(context, (Qcm) semanticObject); 
				return; 
			case QcmPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case QcmPackage.REPONSE:
				sequence_Reponse(context, (Reponse) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Qcm returns Qcm
	 *
	 * Constraint:
	 *     (domaine=EString? question+=Question question+=Question*)
	 */
	protected void sequence_Qcm(ISerializationContext context, Qcm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (intitule=EString? reponse+=Reponse reponse+=Reponse*)
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reponse returns Reponse
	 *
	 * Constraint:
	 *     (data=EString? value=EBoolean?)
	 */
	protected void sequence_Reponse(ISerializationContext context, Reponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
