/**
 * generated by Xtext 2.19.0
 */
package xtext.insa.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import qcm.Qcm;
import qcm.Question;
import qcm.Reponse;
import xtext.insa.services.QcmGrammarAccess;

@SuppressWarnings("all")
public class QcmFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private QcmGrammarAccess _qcmGrammarAccess;
  
  protected void _format(final Qcm qcm, @Extension final IFormattableDocument document) {
    EList<Question> _question = qcm.getQuestion();
    for (final Question question : _question) {
      document.<Question>format(question);
    }
  }
  
  protected void _format(final Question question, @Extension final IFormattableDocument document) {
    EList<Reponse> _reponse = question.getReponse();
    for (final Reponse reponse : _reponse) {
      document.<Reponse>format(reponse);
    }
  }
  
  public void format(final Object qcm, final IFormattableDocument document) {
    if (qcm instanceof XtextResource) {
      _format((XtextResource)qcm, document);
      return;
    } else if (qcm instanceof Qcm) {
      _format((Qcm)qcm, document);
      return;
    } else if (qcm instanceof Question) {
      _format((Question)qcm, document);
      return;
    } else if (qcm instanceof EObject) {
      _format((EObject)qcm, document);
      return;
    } else if (qcm == null) {
      _format((Void)null, document);
      return;
    } else if (qcm != null) {
      _format(qcm, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(qcm, document).toString());
    }
  }
}
